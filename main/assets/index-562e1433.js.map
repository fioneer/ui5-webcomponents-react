{"version":3,"file":"index-562e1433.js","sources":["../../packages/main/src/components/Text/Text.jss.ts","../../packages/main/src/components/Text/index.tsx"],"sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base';\n\nexport const TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%',\n    '&::selection': {\n      background: ThemingParameters.sapSelectedColor,\n      color: ThemingParameters.sapContent_ContrastTextColor\n    }\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  }\n};\n","import { clsx } from 'clsx';\nimport type { ReactNode } from 'react';\nimport React, { forwardRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport type { CommonProps } from '../../interfaces/index.js';\nimport { TextStyles } from './Text.jss.js';\n\nexport interface TextPropTypes extends CommonProps {\n  /**\n   * Pass the text as direct child of Text\n   */\n  children?: ReactNode;\n  /**\n   * Defines how white-space inside <code>Text</code> is handled. If set to true, sequences of white space are preserved.\n   */\n  renderWhitespace?: boolean;\n  /**\n   * Defines whether the text wraps when there is not enough space.\n   */\n  wrapping?: boolean;\n}\n\nconst useStyles = createUseStyles(TextStyles, { name: 'Text' });\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\nconst Text = forwardRef<HTMLSpanElement, TextPropTypes>((props, ref) => {\n  const { children, renderWhitespace, wrapping, className, style, slot, ...rest } = props;\n\n  const classes = useStyles();\n  const classNameString = clsx(\n    classes.text,\n    wrapping === false && classes.noWrap,\n    renderWhitespace && classes.renderWhitespace,\n    className\n  );\n\n  return (\n    <span ref={ref} style={style} className={classNameString} slot={slot} {...rest}>\n      {children}\n    </span>\n  );\n});\n\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true\n};\n\nText.displayName = 'Text';\n\nexport { Text };\n"],"names":["TextStyles","ThemingParameters","useStyles","createUseStyles","Text","forwardRef","props","ref","children","renderWhitespace","wrapping","className","style","slot","rest","classes","classNameString","clsx","jsx"],"mappings":"mOAEO,MAAMA,EAAa,CAExB,KAAM,CACJ,WAAYC,EAAkB,cAC9B,SAAUA,EAAkB,YAC5B,WAAY,SACZ,MAAOA,EAAkB,aACzB,QAAS,eACT,UAAW,aACX,WAAY,WACZ,SAAU,aACV,SAAU,OACV,eAAgB,CACd,WAAYA,EAAkB,iBAC9B,MAAOA,EAAkB,4BAC3B,CACF,EACA,iBAAkB,CAChB,WAAY,UACd,EACA,OAAQ,CACN,aAAc,WACd,WAAY,SACZ,SAAU,SACV,SAAU,SACV,qBAAsB,CACpB,WAAY,KACd,CACF,CACF,ECTAC,EAAAC,EAAAH,EAAA,CAAA,KAAA,MAAA,CAAA,EAKAI,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CACE,KAAA,CAAA,SAAAC,EAAA,iBAAAC,EAAA,SAAAC,EAAA,UAAAC,EAAA,MAAAC,EAAA,KAAAC,EAAA,GAAAC,CAAA,EAAAR,EAEAS,EAAAb,IACAc,EAAAC,EAAwBF,EAAA,KACdL,IAAA,IAAAK,EAAA,OACsBN,GAAAM,EAAA,iBACFJ,CAC5B,EAGF,OAAAO,MAAA,OAAA,CAAA,IAAAX,EAAA,MAAAK,EAAA,UAAAI,EAAA,KAAAH,EAAA,GAAAC,EAAA,SAAAN,CAAA,CAAA,CAKF,CAAA,EAEAJ,EAAA,aAAA,CAAoB,iBAAA,GACA,SAAA,EAEpB,EAEAA,EAAA,YAAA;;"}